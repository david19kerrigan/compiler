!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/david/doc/compiler/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
AC	Makefile	/^AC = nasm$/;"	m
AFLAGS	Makefile	/^AFLAGS = -felf64 -g$/;"	m
ANS	Makefile	/^ANS = 19 15 66$/;"	m
BUILD_DIR	Makefile	/^BUILD_DIR = .\/build$/;"	m
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -g -I.\/src -I\/usr\/include$/;"	m
DEFAULT_SIZE	src/compile.c	/^static const int DEFAULT_SIZE = 32;$/;"	v	typeref:typename:const int	file:
SRC_DIR	Makefile	/^SRC_DIR = .\/src$/;"	m
TEST_DIR	Makefile	/^TEST_DIR = .\/test$/;"	m
TEST_FILES	Makefile	/^TEST_FILES = math_1.c math_2.c math_3.c$/;"	m
_start	build/main.asm	/^_start: $/;"	l
a	test/vars_1.c	/^int a=1+2;$/;"	v	typeref:typename:int
a	test/vars_2.c	/^int a=1+2;$/;"	v	typeref:typename:int
a	test/vars_3.c	/^int a=1+2;$/;"	v	typeref:typename:int
a	test/vars_4.c	/^int a=1+2;$/;"	v	typeref:typename:int
a	test/while_1.c	/^int a=5;$/;"	v	typeref:typename:int
a	test/while_2.c	/^int a=0;$/;"	v	typeref:typename:int
add	build/main.asm	/^add rax, rbx $/;"	l
add	src/compile.c	/^void add(){$/;"	f	typeref:typename:void
align	src/compile.c	/^static const int align = 32;$/;"	v	typeref:typename:const int	file:
and	src/compile.c	/^void and(){$/;"	f	typeref:typename:void
arguments	src/compile.c	/^static char* arguments[] = {"rdi", "rsi", "rdx", "rcx", "r8", "r9"};$/;"	v	typeref:typename:char * []	file:
arguments_ptr	src/compile.c	/^static int arguments_ptr = 0;$/;"	v	typeref:typename:int	file:
arr	test/array_1.c	/^int arr[5];$/;"	v	typeref:typename:int[5]
asm	Makefile	/^asm:$/;"	t
assign_variable	src/compile.c	/^void assign_variable(){$/;"	f	typeref:typename:void
b	test/vars_1.c	/^int b=3*2;$/;"	v	typeref:typename:int
b	test/vars_2.c	/^int b=3*2;$/;"	v	typeref:typename:int
b	test/vars_3.c	/^int b=3*2+a*5;$/;"	v	typeref:typename:int
b	test/vars_4.c	/^int b=3*(2+a)*5;$/;"	v	typeref:typename:int
build_dir	src/compile.c	/^static const char* build_dir = "build\/";$/;"	v	typeref:typename:const char *	file:
c	test/vars_4.c	/^int c=8*((5-a)*b+2)*2;$/;"	v	typeref:typename:int
call	build/main.asm	/^call exit$/;"	l
call	build/main.asm	/^call print_int $/;"	l
check_should_terminate	src/compile.c	/^int check_should_terminate(char* text, int text_ptr, char cur){$/;"	f	typeref:typename:int
clean	Makefile	/^clean:$/;"	t
cond_if	src/compile.c	/^void cond_if(int idem_key){$/;"	f	typeref:typename:void
cond_while	src/compile.c	/^void cond_while(int idem_key){$/;"	f	typeref:typename:void
counter	src/compile.c	/^static int counter = 0;$/;"	v	typeref:typename:int	file:
default	Makefile	/^default: test$/;"	t
equal	src/compile.c	/^void equal(){$/;"	f	typeref:typename:void
exit	src/lib.asm	/^exit:$/;"	l
extern	build/main.asm	/^extern exit $/;"	l
extern	build/main.asm	/^extern int_to_string $/;"	l
extern	build/main.asm	/^extern print_int $/;"	l
find_in_array	src/compile.c	/^int find_in_array(char* text, char** arr, int arr_ptr){$/;"	f	typeref:typename:int
free_array	src/compile.c	/^void free_array(char** arr, int arr_ptr){$/;"	f	typeref:typename:void
functions	src/compile.c	/^static char** functions = NULL;$/;"	v	typeref:typename:char **	file:
functions_ptr	src/compile.c	/^static int functions_ptr = 0;$/;"	v	typeref:typename:int	file:
get_type	src/compile.c	/^int get_type(char in){$/;"	f	typeref:typename:int
global	build/main.asm	/^global _start $/;"	l
global	src/lib.asm	/^global exit$/;"	l
global	src/lib.asm	/^global print_int$/;"	l
greater	src/compile.c	/^void greater(){$/;"	f	typeref:typename:void
handle_operator	src/compile.c	/^int handle_operator(char* text, char* match){$/;"	f	typeref:typename:int
i	test/array_1.c	/^int i=0;$/;"	v	typeref:typename:int
idiv	src/compile.c	/^void idiv(){$/;"	f	typeref:typename:void
int_to_string	src/lib.asm	/^.int_to_string:$/;"	l
is_letter	src/compile.c	/^int is_letter(char in){$/;"	f	typeref:typename:int
is_num_char	src/compile.c	/^int is_num_char(char in){$/;"	f	typeref:typename:int
is_num_str	src/compile.c	/^int is_num_str(char* text, int text_ptr){$/;"	f	typeref:typename:int
is_operator	src/compile.c	/^int is_operator(char in){$/;"	f	typeref:typename:int
lea	build/main.asm	/^lea rdi, [rbx] $/;"	l
less	src/compile.c	/^void less(){$/;"	f	typeref:typename:void
main	test/func_1.c	/^int main(int a, int b){$/;"	f	typeref:typename:int
match_opposite_delimiter	src/compile.c	/^void match_opposite_delimiter(char* text){$/;"	f	typeref:typename:void
mmap	src/compile.c	/^void mmap(int size){$/;"	f	typeref:typename:void
mov	build/main.asm	/^mov rbp, rsp $/;"	l
mul	src/compile.c	/^void mul(){$/;"	f	typeref:typename:void
or	src/compile.c	/^void or(){$/;"	f	typeref:typename:void
pop	build/main.asm	/^pop rax $/;"	l
pop	build/main.asm	/^pop rbx $/;"	l
print_int	src/compile.c	/^void print_int(){$/;"	f	typeref:typename:void
print_int	src/lib.asm	/^print_int:$/;"	l
push	build/main.asm	/^push 22 $/;"	l
push	build/main.asm	/^push rax $/;"	l
read_ptr	src/compile.c	/^static FILE* read_ptr = NULL;$/;"	v	typeref:typename:FILE *	file:
src_dir	src/compile.c	/^static const char* src_dir = "src\/";$/;"	v	typeref:typename:const char *	file:
store_number	src/compile.c	/^void store_number(char* text, int text_ptr){$/;"	f	typeref:typename:void
sub	src/compile.c	/^void sub(){$/;"	f	typeref:typename:void
test	Makefile	/^test:$/;"	t
unequal	src/compile.c	/^void unequal(){$/;"	f	typeref:typename:void
ungetstring	src/compile.c	/^void ungetstring(char* text){$/;"	f	typeref:typename:void
vars_global	src/compile.c	/^static char** vars_global = NULL;$/;"	v	typeref:typename:char **	file:
vars_global_ptr	src/compile.c	/^static int vars_global_ptr = 0;$/;"	v	typeref:typename:int	file:
vars_local	src/compile.c	/^static char** vars_local = NULL;$/;"	v	typeref:typename:char **	file:
vars_local_ptr	src/compile.c	/^static int vars_local_ptr = 0;$/;"	v	typeref:typename:int	file:
write_ptr	src/compile.c	/^static FILE* write_ptr = NULL; $/;"	v	typeref:typename:FILE *	file:
